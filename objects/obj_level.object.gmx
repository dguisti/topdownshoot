<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create level
//resize room
room_width = (cell_width/16)*720;
room_height = (cell_height/16)*720;

//set grid width and height
var width = room_width div cell_width;
var height = room_height div cell_height;

//creat grid
grid = ds_grid_create(width, height);

//fill grid with void
ds_grid_set_region(grid, 0, 0, width -1, height -1, void);

//randomize world
randomize();

//create controller in the center of the grid
var cx = width div 2;
var cy = height div 2;

//create the player
instance_create(cx*cell_width+cell_width/2, cy*cell_height+ cell_height/2, obj_player);
if (room = room_local_game){
instance_create(cx*cell_width+cell_width/2, cy*cell_height+ cell_height/2, obj_player_2);
}

//give the controller a random direction
var cdir = irandom(3);

//odds variable for changing direction
var odds = 1;

//create level using 1000 steps
repeat(1000)
{
    //place floor at controller position
    //ds_grid_set(grid, cx, cy, floor);
    grid[# cx, cy] = floor;
    
    //randomize controller direction
    if (irandom(odds) == odds)
    {
        cdir = irandom(3);
    }
    //move controller
    var xdir = lengthdir_x(1, cdir*90);
    var ydir = lengthdir_y(1, cdir*90);
    cx += xdir;
    cy += ydir;
    
    //can't move outside grid
    cx = clamp(cx, 1, width-2);
    cy = clamp(cy, 1, height-2);
}

//add walls
for (var yy = 1; yy &lt; height - 1; yy++)
{
    for (var xx = 1; xx &lt; width - 1; xx ++)
    {
        if (grid[# xx, yy] == floor) 
        {
            //check for walls
            if (grid[# xx + 1, yy] != floor) grid[# xx + 1, yy] = wall;
            if (grid[# xx - 1, yy] != floor) grid[# xx - 1, yy] = wall;
            if (grid[# xx, yy + 1] != floor) grid[# xx, yy + 1] = wall;
            if (grid[# xx, yy - 1] != floor) grid[# xx, yy - 1] = wall;
        }
    }
}

//draw the level using grid
for (var yy = 0; yy &lt; height; yy ++)
{
    for (var xx = 0; xx &lt; width; xx ++)
    {
        if (grid[# xx, yy] == floor) 
        {
            //draw the floor
            tile_add(bg_floor, 0, 0, cell_width, cell_height, xx*cell_width, yy*cell_height, 0);
        }    
    }
}

// get tile size
var tw = cell_width/2;
var th = cell_height/2;

//add the tiles
for (var yy = 0; yy &lt; height*2;yy ++)
{
    for (var xx = 0; xx &lt; width*2;xx ++)
    {
        if (grid[# xx div 2, yy div 2] == floor)
        {
            //get tile position
            var tx = xx * tw;
            var ty = yy * th;
            
            var right = grid[# (xx + 1) div 2, yy div 2] != floor;
            var left = grid[# (xx - 1) div 2, yy div 2] != floor;
            var top = grid[# xx div 2, (yy - 1) div 2] != floor;
            var bottom = grid[# xx div 2, (yy + 1) div 2] != floor;
            
            var top_right = grid[# (xx + 1) div 2, (yy - 1) div 2] != floor;
            var top_left = grid[# (xx - 1) div 2, (yy - 1) div 2] != floor;
            var bottom_right = grid[# (xx + 1) div 2, (yy + 1) div 2] != floor;
            var bottom_left = grid[# (xx - 1) div 2, (yy + 1) div 2] != floor;
            
            if (right)
            {
                if (bottom)
                {
                    tile_add(bg_wall_tiles, tw * 4, th * 1, tw, th, tx + tw, ty, -ty);
                }
                else if (top)
                {
                    if (top_right)
                    {
                        tile_add(bg_wall_tiles, tw * 4, th * 0, tw, th, tx + tw, ty-th, -ty);
                    }
                    else
                    {
                        tile_add(bg_wall_tiles, tw * 3, th * 0, tw, th, tx, ty-th, -ty);
                    }
                    tile_add(bg_wall_tiles, tw * 0, th * 1, tw, th, tx + tw, ty, -ty);
                }
                else
                {
                    tile_add(bg_wall_tiles, tw * 0, th * 1, tw, th, tx + tw, ty, -ty);
                }
            }
            
            if (left)
            {
                if (bottom)
                {
                    tile_add(bg_wall_tiles, tw * 3, th * 1, tw, th, tx - tw, ty, -ty);
                }
                else if (top)
                {
                    if(top_left)
                    {
                        tile_add(bg_wall_tiles, tw * 3, th * 0, tw, th, tx - tw, ty - th, -ty);
                    }
                    else
                    {
                        tile_add(bg_wall_tiles, tw * 4, th * 0, tw, th, tx, ty - th, -ty);
                    }
                    tile_add(bg_wall_tiles, tw * 2, th * 1, tw, th, tx - tw, ty, -ty);
                }
                else
                {
                    tile_add(bg_wall_tiles, tw * 2, th * 1, tw, th, tx - tw, ty, -ty);
                }
            }
            
            if (top)
            {
                if (!top_right)
                {
                    tile_add(bg_wall_tiles, tw * 2, th * 2, tw, th, tx, ty - th, -ty);
                }
                else if (!top_left)
                {
                    tile_add(bg_wall_tiles, tw * 0, th * 2, tw, th, tx, ty - th, -ty);
                }
                else
                {
                    tile_add(bg_wall_tiles, tw * 1, th * 2, tw, th, tx, ty - th, -ty);
                }
            }
                
            if (bottom)
            {
                if (!bottom_right)
                {
                    tile_add(bg_wall_tiles, tw * 2, th * 0, tw, th, tx, ty, -ty -tw);
                }
                else if (!bottom_left)
                {
                    tile_add(bg_wall_tiles, tw * 0, th * 0, tw, th, tx, ty, -ty -tw);
                }
                else
                {
                    tile_add(bg_wall_tiles, tw * 1, th * 0, tw, th, tx, ty, -ty -tw);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///restart room
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
